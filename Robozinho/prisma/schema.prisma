datasource db {
  provider = "postgresql"
  url      = "postgresql://db_lunar_user:KZ0BopvimZzKti5pqKMDyGzJa6UEP08q@dpg-cuiih356l47c73afonog-a.oregon-postgres.render.com/db_lunar?schema=public"
}

generator client {
  provider = "prisma-client-js"
}

model Adm {
  id       Int      @id @default(autoincrement())
  name     String
  user     String   @unique
  age      Int
  password String
  userWtp  String
  phone    String
  role     String
  points   Int

  // Relacionamento 1:N - Um Adm pode ter vários livros
  books    Book[]  

  // Relacionamento N:N com Subs (usando tabela intermediária AdmSub)
  subs     AdmSub[]
}

model User {
  id       Int      @id @default(autoincrement())
  name     String
  user     String   @unique
  age      Int
  password String
  userWtp  String
  phone    String
  role     String
  points   Int

  // Relacionamento 1:N - Um User pode ter vários livros
  books    Book[]

  // Relacionamento N:N com Subs (usando tabela intermediária UserSub) opcional
  subs     UserSub[]
}

model Book {
  id       Int    @id @default(autoincrement())
  title    String
  authorId Int?
  adminId  Int?
  wUrl     String

  // Relacionamentos
  author   User? @relation(fields: [authorId], references: [id])
  admin    Adm?  @relation(fields: [adminId], references: [id])
}

model Sub {
  id    Int    @id @default(autoincrement())
  name  String @unique

  // Relacionamentos N:N com User e Adm
  users UserSub[]
  adms  AdmSub[]
}

// Tabela intermediária para relação N:N entre User e Sub
model UserSub {
  userId Int
  subId  Int

  user User @relation(fields: [userId], references: [id])
  sub  Sub  @relation(fields: [subId], references: [id])

  @@id([userId, subId]) // Chave composta
}

// Tabela intermediária para relação N:N entre Adm e Sub
model AdmSub {
  admId Int
  subId Int

  adm Adm @relation(fields: [admId], references: [id])
  sub Sub @relation(fields: [subId], references: [id])

  @@id([admId, subId]) // Chave composta
}
